openapi: 3.0.1
info:
  title: Balanced API Gateway
  description: 'The Balanced API will be primarily websocket driven, with some RESTful API endpoints for submitting transactions. Users can subscribe to topics at the level of a particular address to get informed of balance updates or others. All APIs will be public, therefore a user could subscribe to another address if they so choose. API endpoints and their responses are outlined below.
  
  
  Integration - Users will authenticate through a public websocket API. Subscriptions will be handled at the level of global subscribes to market-level data, such as depth, or user level data, such as a particular user’s open orders. The Balanced frontend will use this layer to get a real-time feed of user data and will receive updates based on the current state of the network. The frontend will also submit signed transactions to the backend via the API.'
  termsOfService: http://swagger.io/terms/
  contact:
    email: toanuragjha@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Balanced Network
  url: https://balanced.network/
# servers:
# - url: https://petstore.swagger.io/v2
# - url: http://petstore.swagger.io/v2
tags:
- name: balanced
  description: All API endpoints
  externalDocs:
    description: Find out more
    url: https://bit.ly/3a19oNu
    
paths:

  /assets:
    get:
      tags:
      - balanced
      summary: Susbscribe to all assets of given private keys
      operationId: Get asset details
      parameters:
        - in: query
          name: assets   # Note the name is the same as in the path
          required: true
          schema:
              $ref: '#/components/schemas/assets.subscribe'
          description: List of Markets
        # description: Private key of the assets
        # content:
        #   application/json:
        #     schema:
        #       $ref: '#/components/schemas/assets.subscribe'
        # required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/assets.update'
        400:
          description: Invalid status value
          content: {}

  /dex/price:
    get:
      tags:
      - balanced
      summary: Susbscribe to price details for each trading pair
      operationId: subscribePrices
      parameters:
        - in: query
          name: price   # Note the name is the same as in the path
          required: true
          schema:
              $ref: '#/components/schemas/prices.subscribe'
          description: List of Markets
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/prices.update'
        400:
          description: Invalid status value
          content: {}
          
  /dex/marketdepth:
    get:
      tags:
      - balanced
      summary: Susbscribe to market depth for a token
      operationId: subscribeDepth
      parameters:
        - in: query
          name: marketdepth   # Note the name is the same as in the path
          required: true
          schema:
            $ref: '#/components/schemas/depth.subscribe'
          description: List of tokens
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/depth.update'
        400:
          description: Invalid status value
          content: {}
          
  /dex/openorders:
    get:
      tags:
      - balanced
      summary: Susbscribe to open orders for a private key
      operationId: subscribeOpenOrders
      parameters:
        - in: query
          name: openorders   # Note the name is the same as in the path
          required: true
          schema:
            $ref: '#/components/schemas/order.subscribe'
          description: User Id and *Market
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/order.update'
        400:
          description: Invalid status value
          content: {}
 
  /oracle/price:
    get:
      tags:
      - balanced
      summary: Susbscribe to Oracle price
      operationId: subscribeOracle
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/oracle.update'
        400:
          description: Invalid status value
          content: {}       

  /loans:
    get:
      tags:
      - balanced
      summary: Susbscribe to Loans Contract
      operationId: subscribeLoans
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/loans.update'
        400:
          description: Invalid status value
          content: {}   

  /balanced/overall:
    get:
      tags:
      - balanced
      summary: Susbscribe to Overall Balanced
      operationId: subscribeBalanced
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/balanced.update'
        400:
          description: Invalid status value
          content: {}

  /sicx/price:
    get:
      tags:
      - balanced
      summary: Susbscribe to Staking
      operationId: subscribeStaking
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/staking.update'
        400:
          description: Invalid status value
          content: {}

  /transact:
    get:
      tags:
      - balanced
      summary: Get transaction status
      operationId: subscribeTransact
      parameters:
        - in: query
          name: transact
          required: true
          schema:
            type: string
          description: Transaction Id
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/transact.update'
        400:
          description: Invalid status value
          content: {}


components:

  schemas:

    assets.subscribe:
      type: object
      properties:
        keys:
          type: array
          items:
            type: string
            example: "hx…3"
    
    assets.update:
      type: object
      properties:
        asset:
          type: string
        dexFree:
          type: integer
          format: int64
          example: 20000
        dexLocked:
          type: integer
          format: int64
          example: 10000
        wallet:
          type: string
          format:  hex
          example: "hx...3"
        collateral:
          type: integer
          format: int64
          example: 50000
        unrealizedLosses:
          type: number
          format: float
          example: 1.232

    prices.subscribe:
      type: object
      properties:
        markets:
          type: array
          items:
            type: string
            example: "ICDICX\", \"SICXICX"

    prices.update:
      type: object
      properties:
        tradePair:
          type: string
          example: "ICDICX-SICXICX"
        Last:
          type: number
          format: float
          example: .33
        Mark:
          type: number
          format: float
          example: .30
        
    depth.subscribe:
      type: object
      properties:
        market:
          type: string
          example: "ICXICD"
        
    depth.update:
      type: object
      properties:
        tradePair:
          type: string
          example: "ICXICD-SICXICX"
        Market:
          type: string
          example: ICXICD
        Bids:
          type: array
          items:  
            type: number
            example: .88, 10000
        Asks:
          type: array
          items:  
            type: number
            example: .89, 9000

    order.subscribe:
      type: object
      properties:
        uid:
          type: string
          example: "hx….2"
        market:
          type: string
          example: "SICXICX"

    order.update:
      type: object
      properties:
        Market:
          type: string
          example: "SICXICX"
        id:
          type: integer
          example: 123
        type:
          type: string
          enum: [buy, sell]
        price:
          type: number
          example: 11.2
        amount:
          type: number
          example: 23
        filled:
          type: number
          example: 14
        user:
          type: string
          example: "hx...2"
        last:
          type: number
          example: 14
        event:
          type: string
          enum: [created, updated, filled, cancelled]

    oracle.update:
      type: object
      properties:
        Market:
          type: string
          example: "ICXUSD"
        Price:
          type: number
          example: .34112
        Time:
          type: number
          example: 19281820192
    
    loans.update:
      type: object
      properties:
        totalCollateral:
          type: number
          example: 11.2
        totalDebt:
          type: number
          example: 11.5
        badDebt: 
          type: number
          example: 1
    
    balanced.update:
      type: object
      properties:
        liquidationPool:
          type: string
          example: 11.2 ICX
    
    staking.update:
      type: object
      properties:
        Rate:
          type: number
          example: 0.889

    transact.update:
      type: object
      properties:
        status:
          type: string
          enum: [confirmed, error]

  securitySchemes:
    balanced_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:balanced: modify balanced network
            read:balanced: read Balanced network
    api_key:
      type: apiKey
      name: api_key
      in: header
